import numpy as np

import zigzag_scan

No = 1000


def cox_gen_sig(No):
    """Генерация последовательности чисел, длиной No

    Данная функция позволяет сгенерировать последовательность из псевдослучайных чисел,
    которые распределены по гауссовскому закону
    Функция принимает в качестве аргумента длину генерируемой последовательности No и
    возвращает список <class=list> из
    """
    RGS = np.random.randn(
        No
    )  # RGS имеет тип 'numpy.ndarray', который позволяет хранить "большие" значения
    # RGS имеет класс numpy.ndarray - битовый массив, без ограничения длины значени
    # преобразуем его в стандартный список list (индексированную последовательность значений) функ. tolist()
    return RGS.tolist()  # возвращаем стандартный список list


gen_list = cox_gen_sig(
    No
)  # генерируем случайную последовательность для встраивания в контейнер
# print(gen_list)  # выведем сгенирированную последовательность
# myList = [round(x, 2) for x in gen_list]  # округлим до сотых (для первого примера встраивания)
# print(myList)

a = [[1, 2, 3, 4, 5], [4, 5, 6, 4, 5], [4, 5, 6, 4, 5], [4, 5, 6, 4, 5]]

# функция генерирует новую матрицу, где каждая строка содержит индексы (по вертикали - строки,
# и по горизонтали - столбцы) и значения элементов, причем номер (индекс) строки соответсвует
# порядку элемента в исходной матрице при проходе по ней зигзагами (змеевидном проходе)
zigzagmatrix = zigzag_scan.zigzagscan(a)

for i in zigzagmatrix:
    print(i)
