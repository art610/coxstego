import os  # взаимодействие с системой для указания пути к файлам, их загрузке и выгрузке

import matplotlib.image as mpimg  # модуль для загрузки исходного файла с изображением
import matplotlib.pyplot as plt  # модуль для отрисовки полотна с изображением
import numpy as np

import cox_check  # импортируем модуль для проверки работы алгоритма
import cox_embed  # импортируем скрипт с функцией встраивания информации в контейнер

IMAGE_NAME = "sample_image.png"  # указываем здесь наименование изображения
No = 1000  # длина последовательности Omega


# =========================================================================
# получаем полутоновое растровое изображение - исходный пустой контейнер
# получаем путь к текущей директории (где находится скрипт)
CURRENT_DIR = os.path.dirname(os.path.abspath(__file__))
# получаем полный путь к изображению (включая его название)
IMAGE_FILE = os.path.join(CURRENT_DIR, IMAGE_NAME)


def rgb2gray(rgb):
    """Преобразование исходного RGB в оттенки серого

    Данная функция позволяет преобразвать исходное изображение в полутоновое растровое,
    что будет являться контейнером
    """
    return np.dot(rgb[..., :3], [0.2989, 0.5870, 0.1140])


# получаем файл с изображением и преобразуем его в полутоновое изображение-контейнер, используя функцию rgb2gray
img = mpimg.imread(IMAGE_FILE)
EMPTY_CONTAINER = rgb2gray(img)


def cox_gen_sig(no):
    """Генерация последовательности чисел, длиной no

    Данная функция позволяет сгенерировать последовательность из псевдослучайных чисел,
    которые распределены по гауссовскому закону
    Функция принимает в качестве аргумента длину генерируемой последовательности No и
    возвращает список
    """
    rgs = np.random.randn(
        no
    )  # RGS имеет тип 'numpy.ndarray', который позволяет хранить "большие" значения
    # RGS имеет класс numpy.ndarray - битовый массив, без ограничения длины значений
    # преобразуем его в стандартный список list (индексированную последовательность значений) функ. tolist()
    return rgs  # tolist() возвращаем стандартный список list


OMEGA = cox_gen_sig(
    No
)  # генерируем случайную последовательность для встраивания в контейнер
# print(gen_list)  # выведем сгенирированную последовательность
# myList = [round(x, 2) for x in gen_list]  # округлим до сотых (для первого примера встраивания)
# print(myList)

ALPHA = 0.42
EMBED_RESULT = cox_embed.cox_embed(EMPTY_CONTAINER, OMEGA, ALPHA)
FULL_CONTAINER = EMBED_RESULT[0]  # заполненный контейнер
MODIFIED_ELEMENTS = EMBED_RESULT[
    1
]  # матрица из спектральных компонент, которые были изменены

# выводим полученное после преобразований изображение-контейнер
plt.imshow(FULL_CONTAINER, cmap=plt.get_cmap("gray"), vmin=0, vmax=1)
plt.savefig(
    "FULL_CONTAINER.png"
)  # сохраним заполненный контейнер в файл FULL_CONTAINER.png
plt.show()

# проверяем значения
cox_check.algorithm_check(MODIFIED_ELEMENTS, EMPTY_CONTAINER, FULL_CONTAINER, OMEGA)
